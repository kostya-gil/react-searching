{"version":3,"sources":["store/actions/types.js","store/reducers/index.js","store/index.js","components/Search/index.js","store/actions/index.js","components/Post/index.js","components/Posts/index.js","App.js","serviceWorker.js","index.js"],"names":["FETCH_POSTS","initialState","items","loading","query","totalCount","combineReducers","posts","state","arguments","length","undefined","action","type","payload","store","createStore","rootReducer","applyMiddleware","thunk","Search","getAnswer","debounce","_this","setState","props","fetchPosts","_this2","this","loadingStatus","react_default","a","createElement","className","autoFocus","placeholder","onChange","e","target","value","Component","connect","page","dispatch","axios","get","concat","then","res","data","parseInt","total_count","catch","error","id","full_name","console","log","Post","title","post","url","html_url","countStars","stargazers_count","countSubs","watchers_count","href","rel","Posts","infinityScroll","resultStatus","postItems","map","components_Post","key","onScroll","App","es","components_Search","components_Posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e70cf518.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';\n","import { FETCH_POSTS } from '../actions/types';\nimport { combineReducers } from 'redux';\n\nconst initialState = {\n  items: [],\n  loading: false,\n  query: '',\n  totalCount: -1\n};\n\nfunction postReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_POSTS:\n      return {\n        items: action.payload.posts,\n        loading: action.payload.loading,\n        query: action.payload.query,\n        totalCount: action.payload.totalCount\n      };\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  posts: postReducer\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(thunk)\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { debounce } from 'lodash';\nimport { fetchPosts } from '../../store/actions';\nimport './Search.scss';\n\nclass Search extends Component {\n  state = {\n    query: ''\n  }\n\n  getAnswer = debounce((query) => {\n    this.setState({ query });\n    if (this.state.query) {\n     this.props.fetchPosts(this.state.query);\n    }\n  }, 500);\n\n  render() {\n    const loadingStatus = this.props.loading ? 'Загружаю...': '';\n    return (\n      <div className=\"search\">\n        <input type=\"text\"\n          autoFocus={true}\n          className=\"search__input\"\n          placeholder=\"Поиск\"\n          onChange={e => this.getAnswer(e.target.value)}\n        />\n        <p className=\"search__status\">{loadingStatus}</p>\n      </div>\n    );\n  }\n}\n\nSearch.propTypes = {\n  fetchPosts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  loading: state.posts.loading\n});\n\nexport default connect(mapStateToProps, { fetchPosts })(Search);\n","import { FETCH_POSTS } from './types';\nimport axios from 'axios';\n\nexport const fetchPosts = (query, page = 1) => (dispatch) => {\n  dispatch({\n    type: FETCH_POSTS,\n    payload: {\n      posts: [],\n      loading: true,\n      query: query,\n      totalCount: -1\n    }\n  });\n  axios.get(`https://api.github.com/search/repositories?q=${query}&page=${page}&per_page=10`)\n    .then(res => res.data)\n    .then(posts => {\n      dispatch({\n        type: FETCH_POSTS,\n        payload: {\n          posts: posts.items,\n          loading: false,\n          query: query,\n          totalCount: parseInt(posts.total_count, 10)\n        }\n      });\n    }\n  ).catch(error => {\n    dispatch({\n      type: FETCH_POSTS,\n      payload: {\n        posts: [\n          {\n            id: 'error1',\n            full_name: error\n          }\n        ],\n        loading: false,\n        query: query,\n        totalCount: -1\n      }\n    });\n    console.log(error);\n  });\n};\n","import React, { Component } from 'react';\nimport './Post.scss';\n\nclass Post extends Component {\n  render() {\n    const title = this.props.post.full_name;\n    const url = this.props.post.html_url;\n    const countStars = this.props.post.stargazers_count;\n    const countSubs = this.props.post.watchers_count;\n\n    return (\n      <div className=\"post\">\n        <h3 className=\"post__title\">\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n        </h3>\n        <p className=\"post__count-stars\">{countStars}</p>\n        <p className=\"post__count-subs\">{countSubs}</p>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport { connect } from 'react-redux';\nimport Post from '../Post';\nimport './Posts.scss';\n\nclass Posts extends Component {\n  infinityScroll = debounce((query) => {\n    //\n  }, 500);\n\n  render() {\n    const resultStatus = (this.props.totalCount === 0 && this.props.query !== undefined) ? 'К сожалению, ничего не найдено...': '';\n    const postItems = this.props.posts.map(post => (\n      <Post post={post} key={post.id} />\n    ));\n    return (\n      <div className=\"result\" onScroll={e => this.infinityScroll(e.target.value)} >\n        {postItems}\n        <p className=\"search__status\">{resultStatus}</p>\n      </div>\n    );\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired,\n  query: PropTypes.string.isRequired,\n  totalCount: PropTypes.number.isRequired\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts.items,\n  query: state.posts.query,\n  totalCount: state.posts.totalCount\n});\n\nexport default connect(mapStateToProps, null)(Posts);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './styles/App.scss';\n\nimport Search from './components/Search';\nimport Posts from './components/Posts';\n\nclass App extends Component {\n  render() {\n   return (\n     <Provider store={store}>\n        <div className=\"App\">\n          <div className=\"wrapper\">\n            <h1>Поиск GitHub</h1>\n            <Search />\n            <Posts />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}