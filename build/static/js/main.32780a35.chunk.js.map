{"version":3,"sources":["store/actions/types.js","store/reducers/index.js","store/index.js","store/actions/index.js","components/Search/index.js","components/Post/index.js","components/Posts/index.js","App.js","serviceWorker.js","index.js"],"names":["FETCH_POSTS","RESET","initialState","items","loading","query","totalCount","combineReducers","posts","state","action","type","Object","objectSpread","concat","payload","store","createStore","rootReducer","applyMiddleware","thunk","fetchPosts","page","dispatch","axios","get","then","res","data","parseInt","total_count","catch","error","console","log","connect","reset","Component","[object Object]","args","super","this","getAnswer","debounce","props","setState","render","loadingStatus","react_default","a","createElement","className","autoFocus","placeholder","onChange","e","target","value","dangerouslySetInnerHTML","__html","Post","title","post","full_name","url","html_url","countStars","stargazers_count","countSubs","watchers_count","description","href","rel","nextPage","infinityScroll","wrapper","list","firstElementChild","wrapperHeight","offsetHeight","listHeight","scrollTop","resultStatus","undefined","postItems","map","components_Post","key","id","onScroll","App","es","components_Search","components_Posts","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32780a35.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';\nexport const RESET = 'RESET';\n","import { combineReducers } from 'redux';\nimport { FETCH_POSTS, RESET } from '../actions/types';\n\nconst initialState = {\n  items: [],\n  loading: false,\n  query: '',\n  totalCount: -1,\n};\n\nfunction postReducer(state = initialState, action) {\n  switch (action.type) {\n    case RESET:\n      return {\n        ...state,\n        items: [],\n        loading: false,\n        query: '',\n        totalCount: -1,\n      };\n    case FETCH_POSTS:\n      return {\n        ...state,\n        items: state.items.concat(action.payload.posts),\n        loading: action.payload.loading,\n        query: action.payload.query,\n        totalCount: action.payload.totalCount,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  posts: postReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import axios from 'axios';\nimport { FETCH_POSTS, RESET } from './types';\n\nexport const reset = () => (dispatch) => {\n  dispatch({\n    type: RESET,\n    payload: {},\n  });\n};\n\nexport const fetchPosts = (query, page = 1) => (dispatch) => {\n  dispatch({\n    type: FETCH_POSTS,\n    payload: {\n      posts: [],\n      loading: true,\n      query,\n      totalCount: -1,\n    },\n  });\n  axios.get(`https://api.github.com/search/repositories?q=${query}&page=${page}&per_page=10`)\n    .then(res => res.data)\n    .then((posts) => {\n      dispatch({\n        type: FETCH_POSTS,\n        payload: {\n          posts: posts.items,\n          loading: false,\n          query,\n          totalCount: parseInt(posts.total_count, 10),\n        },\n      });\n    }).catch((error) => {\n      console.log(error);\n    });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { debounce } from 'lodash';\nimport { fetchPosts, reset } from '../../store/actions';\nimport './Search.scss';\n\nclass Search extends Component {\n  state = {\n    query: ''\n  }\n\n  getAnswer = debounce((query) => {\n    if (query !== this.props.query) {\n      this.props.reset();\n    }\n    this.setState({ query });\n    if (this.state.query) {\n     this.props.fetchPosts(this.state.query);\n    }\n  }, 500);\n\n  render() {\n    const loadingStatus = this.props.loading ? 'Загружаю...': '<div style=\"visibility:hidden\">text</div>';\n    return (\n      <div className=\"search\">\n        <input type=\"text\"\n          autoFocus={true}\n          className=\"search__input\"\n          placeholder=\"Поиск\"\n          onChange={e => this.getAnswer(e.target.value)}\n        />\n        <p className=\"search__status\" dangerouslySetInnerHTML={{__html: loadingStatus}}></p>\n      </div>\n    );\n  }\n}\n\nSearch.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  loading: state.posts.loading,\n  query: state.posts.query\n});\n\nexport default connect(mapStateToProps, { fetchPosts, reset })(Search);\n","import React, { Component } from 'react';\nimport './Post.scss';\n\nclass Post extends Component {\n  render() {\n    const title = this.props.post.full_name;\n    const url = this.props.post.html_url;\n    const countStars = this.props.post.stargazers_count;\n    const countSubs = this.props.post.watchers_count;\n    const description = this.props.post.description;\n\n    return (\n      <div className=\"post\">\n        <h3 className=\"post__title\">\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n        </h3>\n        <p className=\"post__text\">{description}</p>\n        <p className=\"post__count-stars\">\nЗвезд\n          <span className=\"post__counter\">{countStars}</span>\n        </p>\n        <p className=\"post__count-subs\">\nПодписчиков\n          <span className=\"post__counter\">{countSubs}</span>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../../store/actions';\nimport Post from '../Post';\nimport './Posts.scss';\n\nclass Posts extends Component {\n  state = {\n    nextPage: 1\n  }\n\n  infinityScroll = debounce((wrapper) => {\n    const list = wrapper.firstElementChild;\n\n    let wrapperHeight = wrapper.offsetHeight;\n    let listHeight = list.offsetHeight;\n    let scrollTop = wrapper.scrollTop;\n\n    let diffHeight = listHeight - wrapperHeight;\n    if (diffHeight <= scrollTop && !this.props.loading && scrollTop > 0) {\n      this.setState(({ nextPage }) => ({\n        nextPage: nextPage + 1\n      }));\n      this.props.fetchPosts(this.props.query, this.state.nextPage);\n    }\n  }, 500);\n\n  render() {\n    const resultStatus = (this.props.totalCount === 0 && this.props.query !== undefined) ? 'К сожалению, ничего не найдено...': '';\n    const postItems = this.props.posts.map(post => (\n      <Post post={post} key={post.id} />\n    ));\n    return (\n      <div className=\"result\" onScroll={e => this.infinityScroll(e.target)} >\n        <div>\n          {postItems}\n          <p className=\"search__status\">{resultStatus}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired,\n  query: PropTypes.string.isRequired,\n  totalCount: PropTypes.number.isRequired\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts.items,\n  query: state.posts.query,\n  totalCount: state.posts.totalCount,\n  loading: state.posts.loading\n});\n\nexport default connect(mapStateToProps, {fetchPosts})(Posts);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './styles/App.scss';\n\nimport Search from './components/Search';\nimport Posts from './components/Posts';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <div className=\"wrapper\">\n            <h1>Поиск GitHub</h1>\n            <Search />\n            <Posts />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}